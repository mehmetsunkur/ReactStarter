/**
 * Broadleaf Commerce API
 * The default Broadleaf Commerce APIs
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ConfigurableOrderItemWrapper } from '../model/configurableOrderItemWrapper';
import { OrderItemWrapper } from '../model/orderItemWrapper';
import { OrderWrapper } from '../model/orderWrapper';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class WishlistEndpointService {

    protected basePath = 'https://localhost:3000/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addConfigureItemToWishlist
     * 
     * @param orderItemWrapper orderItemWrapper
     * @param wishlistName wishlistName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addConfigureItemToWishlistUsingPOST1(orderItemWrapper: ConfigurableOrderItemWrapper, wishlistName: string, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public addConfigureItemToWishlistUsingPOST1(orderItemWrapper: ConfigurableOrderItemWrapper, wishlistName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public addConfigureItemToWishlistUsingPOST1(orderItemWrapper: ConfigurableOrderItemWrapper, wishlistName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public addConfigureItemToWishlistUsingPOST1(orderItemWrapper: ConfigurableOrderItemWrapper, wishlistName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (orderItemWrapper === null || orderItemWrapper === undefined) {
            throw new Error('Required parameter orderItemWrapper was null or undefined when calling addConfigureItemToWishlistUsingPOST1.');
        }
        if (wishlistName === null || wishlistName === undefined) {
            throw new Error('Required parameter wishlistName was null or undefined when calling addConfigureItemToWishlistUsingPOST1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (wishlistName !== undefined) {
            queryParameters = queryParameters.set('wishlistName', <any>wishlistName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/wishlist/configure-item`,
            orderItemWrapper,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * addItemToWishlist
     * 
     * @param orderItemWrapper orderItemWrapper
     * @param wishlistName wishlistName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addItemToWishlistUsingPOST1(orderItemWrapper: OrderItemWrapper, wishlistName: string, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public addItemToWishlistUsingPOST1(orderItemWrapper: OrderItemWrapper, wishlistName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public addItemToWishlistUsingPOST1(orderItemWrapper: OrderItemWrapper, wishlistName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public addItemToWishlistUsingPOST1(orderItemWrapper: OrderItemWrapper, wishlistName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (orderItemWrapper === null || orderItemWrapper === undefined) {
            throw new Error('Required parameter orderItemWrapper was null or undefined when calling addItemToWishlistUsingPOST1.');
        }
        if (wishlistName === null || wishlistName === undefined) {
            throw new Error('Required parameter wishlistName was null or undefined when calling addItemToWishlistUsingPOST1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (wishlistName !== undefined) {
            queryParameters = queryParameters.set('wishlistName', <any>wishlistName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/wishlist/item`,
            orderItemWrapper,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getWishlist
     * 
     * @param wishlistName wishlistName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getWishlistUsingGET1(wishlistName: string, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public getWishlistUsingGET1(wishlistName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public getWishlistUsingGET1(wishlistName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public getWishlistUsingGET1(wishlistName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wishlistName === null || wishlistName === undefined) {
            throw new Error('Required parameter wishlistName was null or undefined when calling getWishlistUsingGET1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (wishlistName !== undefined) {
            queryParameters = queryParameters.set('wishlistName', <any>wishlistName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<OrderWrapper>(`${this.basePath}/wishlist`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * moveItemToCart
     * 
     * @param wishlistName wishlistName
     * @param itemId itemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public moveItemToCartUsingPOST1(wishlistName: string, itemId: string, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public moveItemToCartUsingPOST1(wishlistName: string, itemId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public moveItemToCartUsingPOST1(wishlistName: string, itemId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public moveItemToCartUsingPOST1(wishlistName: string, itemId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wishlistName === null || wishlistName === undefined) {
            throw new Error('Required parameter wishlistName was null or undefined when calling moveItemToCartUsingPOST1.');
        }
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling moveItemToCartUsingPOST1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (wishlistName !== undefined) {
            queryParameters = queryParameters.set('wishlistName', <any>wishlistName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/wishlist/items/${encodeURIComponent(String(itemId))}/move`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * moveListToCart
     * 
     * @param wishlistName wishlistName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public moveListToCartUsingPOST1(wishlistName: string, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public moveListToCartUsingPOST1(wishlistName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public moveListToCartUsingPOST1(wishlistName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public moveListToCartUsingPOST1(wishlistName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wishlistName === null || wishlistName === undefined) {
            throw new Error('Required parameter wishlistName was null or undefined when calling moveListToCartUsingPOST1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (wishlistName !== undefined) {
            queryParameters = queryParameters.set('wishlistName', <any>wishlistName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/wishlist`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeItemFromWishlist
     * 
     * @param wishlistName wishlistName
     * @param itemId itemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeItemFromWishlistUsingDELETE1(wishlistName: string, itemId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public removeItemFromWishlistUsingDELETE1(wishlistName: string, itemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public removeItemFromWishlistUsingDELETE1(wishlistName: string, itemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public removeItemFromWishlistUsingDELETE1(wishlistName: string, itemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wishlistName === null || wishlistName === undefined) {
            throw new Error('Required parameter wishlistName was null or undefined when calling removeItemFromWishlistUsingDELETE1.');
        }
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling removeItemFromWishlistUsingDELETE1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (wishlistName !== undefined) {
            queryParameters = queryParameters.set('wishlistName', <any>wishlistName);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<OrderWrapper>(`${this.basePath}/wishlist/items/${encodeURIComponent(String(itemId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateQuantityInWishlist
     * 
     * @param wishlistName wishlistName
     * @param itemId itemId
     * @param quantity quantity
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateQuantityInWishlistUsingPUT1(wishlistName: string, itemId: number, quantity: number, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public updateQuantityInWishlistUsingPUT1(wishlistName: string, itemId: number, quantity: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public updateQuantityInWishlistUsingPUT1(wishlistName: string, itemId: number, quantity: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public updateQuantityInWishlistUsingPUT1(wishlistName: string, itemId: number, quantity: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wishlistName === null || wishlistName === undefined) {
            throw new Error('Required parameter wishlistName was null or undefined when calling updateQuantityInWishlistUsingPUT1.');
        }
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling updateQuantityInWishlistUsingPUT1.');
        }
        if (quantity === null || quantity === undefined) {
            throw new Error('Required parameter quantity was null or undefined when calling updateQuantityInWishlistUsingPUT1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (wishlistName !== undefined) {
            queryParameters = queryParameters.set('wishlistName', <any>wishlistName);
        }
        if (quantity !== undefined) {
            queryParameters = queryParameters.set('quantity', <any>quantity);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<OrderWrapper>(`${this.basePath}/wishlist/items/${encodeURIComponent(String(itemId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
