/**
 * Broadleaf Commerce API
 * The default Broadleaf Commerce APIs
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Resource } from '../model/resource';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ThemeEndpointService {

    protected basePath = 'https://localhost:3000/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getCssThemeFile
     * 
     * @param fileName fileName
     * @param filePath filePath
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCssThemeFileUsingDELETE1(fileName: string, filePath: string, observe?: 'body', reportProgress?: boolean): Observable<Resource>;
    public getCssThemeFileUsingDELETE1(fileName: string, filePath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Resource>>;
    public getCssThemeFileUsingDELETE1(fileName: string, filePath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Resource>>;
    public getCssThemeFileUsingDELETE1(fileName: string, filePath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling getCssThemeFileUsingDELETE1.');
        }
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling getCssThemeFileUsingDELETE1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filePath !== undefined) {
            queryParameters = queryParameters.set('filePath', <any>filePath);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<Resource>(`${this.basePath}/theme/css/${encodeURIComponent(String(fileName))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCssThemeFile
     * 
     * @param fileName fileName
     * @param filePath filePath
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCssThemeFileUsingGET1(fileName: string, filePath: string, observe?: 'body', reportProgress?: boolean): Observable<Resource>;
    public getCssThemeFileUsingGET1(fileName: string, filePath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Resource>>;
    public getCssThemeFileUsingGET1(fileName: string, filePath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Resource>>;
    public getCssThemeFileUsingGET1(fileName: string, filePath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling getCssThemeFileUsingGET1.');
        }
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling getCssThemeFileUsingGET1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filePath !== undefined) {
            queryParameters = queryParameters.set('filePath', <any>filePath);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Resource>(`${this.basePath}/theme/css/${encodeURIComponent(String(fileName))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCssThemeFile
     * 
     * @param fileName fileName
     * @param filePath filePath
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCssThemeFileUsingHEAD1(fileName: string, filePath: string, observe?: 'body', reportProgress?: boolean): Observable<Resource>;
    public getCssThemeFileUsingHEAD1(fileName: string, filePath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Resource>>;
    public getCssThemeFileUsingHEAD1(fileName: string, filePath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Resource>>;
    public getCssThemeFileUsingHEAD1(fileName: string, filePath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling getCssThemeFileUsingHEAD1.');
        }
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling getCssThemeFileUsingHEAD1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filePath !== undefined) {
            queryParameters = queryParameters.set('filePath', <any>filePath);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.head<Resource>(`${this.basePath}/theme/css/${encodeURIComponent(String(fileName))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCssThemeFile
     * 
     * @param fileName fileName
     * @param filePath filePath
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCssThemeFileUsingOPTIONS1(fileName: string, filePath: string, observe?: 'body', reportProgress?: boolean): Observable<Resource>;
    public getCssThemeFileUsingOPTIONS1(fileName: string, filePath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Resource>>;
    public getCssThemeFileUsingOPTIONS1(fileName: string, filePath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Resource>>;
    public getCssThemeFileUsingOPTIONS1(fileName: string, filePath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling getCssThemeFileUsingOPTIONS1.');
        }
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling getCssThemeFileUsingOPTIONS1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filePath !== undefined) {
            queryParameters = queryParameters.set('filePath', <any>filePath);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.options<Resource>(`${this.basePath}/theme/css/${encodeURIComponent(String(fileName))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCssThemeFile
     * 
     * @param fileName fileName
     * @param filePath filePath
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCssThemeFileUsingPATCH1(fileName: string, filePath: string, observe?: 'body', reportProgress?: boolean): Observable<Resource>;
    public getCssThemeFileUsingPATCH1(fileName: string, filePath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Resource>>;
    public getCssThemeFileUsingPATCH1(fileName: string, filePath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Resource>>;
    public getCssThemeFileUsingPATCH1(fileName: string, filePath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling getCssThemeFileUsingPATCH1.');
        }
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling getCssThemeFileUsingPATCH1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filePath !== undefined) {
            queryParameters = queryParameters.set('filePath', <any>filePath);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.patch<Resource>(`${this.basePath}/theme/css/${encodeURIComponent(String(fileName))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCssThemeFile
     * 
     * @param fileName fileName
     * @param filePath filePath
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCssThemeFileUsingPOST1(fileName: string, filePath: string, observe?: 'body', reportProgress?: boolean): Observable<Resource>;
    public getCssThemeFileUsingPOST1(fileName: string, filePath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Resource>>;
    public getCssThemeFileUsingPOST1(fileName: string, filePath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Resource>>;
    public getCssThemeFileUsingPOST1(fileName: string, filePath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling getCssThemeFileUsingPOST1.');
        }
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling getCssThemeFileUsingPOST1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filePath !== undefined) {
            queryParameters = queryParameters.set('filePath', <any>filePath);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<Resource>(`${this.basePath}/theme/css/${encodeURIComponent(String(fileName))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCssThemeFile
     * 
     * @param fileName fileName
     * @param filePath filePath
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCssThemeFileUsingPUT1(fileName: string, filePath: string, observe?: 'body', reportProgress?: boolean): Observable<Resource>;
    public getCssThemeFileUsingPUT1(fileName: string, filePath: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Resource>>;
    public getCssThemeFileUsingPUT1(fileName: string, filePath: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Resource>>;
    public getCssThemeFileUsingPUT1(fileName: string, filePath: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (fileName === null || fileName === undefined) {
            throw new Error('Required parameter fileName was null or undefined when calling getCssThemeFileUsingPUT1.');
        }
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling getCssThemeFileUsingPUT1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filePath !== undefined) {
            queryParameters = queryParameters.set('filePath', <any>filePath);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<Resource>(`${this.basePath}/theme/css/${encodeURIComponent(String(fileName))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
