/**
 * Broadleaf Commerce API
 * The default Broadleaf Commerce APIs
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ConfigurableOrderItemWrapper } from '../model/configurableOrderItemWrapper';
import { OrderAttributeWrapper } from '../model/orderAttributeWrapper';
import { OrderItemAttributeWrapper } from '../model/orderItemAttributeWrapper';
import { OrderItemWrapper } from '../model/orderItemWrapper';
import { OrderWrapper } from '../model/orderWrapper';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReactCartEndpointService {

    protected basePath = 'https://localhost:3000/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addConfigureItemToOrder
     * 
     * @param cartId cartId
     * @param orderItemWrapper orderItemWrapper
     * @param priceOrder priceOrder
     * @param isUpdateRequest isUpdateRequest
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addConfigureItemToOrderUsingPOST1(cartId: number, orderItemWrapper: ConfigurableOrderItemWrapper, priceOrder?: boolean, isUpdateRequest?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public addConfigureItemToOrderUsingPOST1(cartId: number, orderItemWrapper: ConfigurableOrderItemWrapper, priceOrder?: boolean, isUpdateRequest?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public addConfigureItemToOrderUsingPOST1(cartId: number, orderItemWrapper: ConfigurableOrderItemWrapper, priceOrder?: boolean, isUpdateRequest?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public addConfigureItemToOrderUsingPOST1(cartId: number, orderItemWrapper: ConfigurableOrderItemWrapper, priceOrder?: boolean, isUpdateRequest?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling addConfigureItemToOrderUsingPOST1.');
        }
        if (orderItemWrapper === null || orderItemWrapper === undefined) {
            throw new Error('Required parameter orderItemWrapper was null or undefined when calling addConfigureItemToOrderUsingPOST1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (isUpdateRequest !== undefined) {
            queryParameters = queryParameters.set('isUpdateRequest', <any>isUpdateRequest);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/configure-item`,
            orderItemWrapper,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * addItemToOrder
     * 
     * @param cartId cartId
     * @param orderItemWrapper orderItemWrapper
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addItemToOrderUsingPOST3(cartId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public addItemToOrderUsingPOST3(cartId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public addItemToOrderUsingPOST3(cartId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public addItemToOrderUsingPOST3(cartId: number, orderItemWrapper: OrderItemWrapper, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling addItemToOrderUsingPOST3.');
        }
        if (orderItemWrapper === null || orderItemWrapper === undefined) {
            throw new Error('Required parameter orderItemWrapper was null or undefined when calling addItemToOrderUsingPOST3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/item`,
            orderItemWrapper,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * addOfferCode
     * 
     * @param promoCode promoCode
     * @param cartId cartId
     * @param customerId 
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addOfferCodeUsingPOST3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public addOfferCodeUsingPOST3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public addOfferCodeUsingPOST3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public addOfferCodeUsingPOST3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (promoCode === null || promoCode === undefined) {
            throw new Error('Required parameter promoCode was null or undefined when calling addOfferCodeUsingPOST3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling addOfferCodeUsingPOST3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling addOfferCodeUsingPOST3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/offer/${encodeURIComponent(String(promoCode))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * configureItem
     * 
     * @param productId productId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public configureItemUsingGET1(productId: number, observe?: 'body', reportProgress?: boolean): Observable<ConfigurableOrderItemWrapper>;
    public configureItemUsingGET1(productId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurableOrderItemWrapper>>;
    public configureItemUsingGET1(productId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurableOrderItemWrapper>>;
    public configureItemUsingGET1(productId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (productId === null || productId === undefined) {
            throw new Error('Required parameter productId was null or undefined when calling configureItemUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ConfigurableOrderItemWrapper>(`${this.basePath}/cart/configure/${encodeURIComponent(String(productId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createNewCartForCustomer
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createNewCartForCustomerUsingPOST3(observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public createNewCartForCustomerUsingPOST3(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public createNewCartForCustomerUsingPOST3(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public createNewCartForCustomerUsingPOST3(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/cart`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteOrderAttributes
     * 
     * @param requestParams requestParams
     * @param cartId cartId
     * @param customerId 
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteOrderAttributesUsingDELETE3(requestParams: Array<OrderAttributeWrapper>, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public deleteOrderAttributesUsingDELETE3(requestParams: Array<OrderAttributeWrapper>, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public deleteOrderAttributesUsingDELETE3(requestParams: Array<OrderAttributeWrapper>, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public deleteOrderAttributesUsingDELETE3(requestParams: Array<OrderAttributeWrapper>, cartId: number, customerId: number, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (requestParams === null || requestParams === undefined) {
            throw new Error('Required parameter requestParams was null or undefined when calling deleteOrderAttributesUsingDELETE3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling deleteOrderAttributesUsingDELETE3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling deleteOrderAttributesUsingDELETE3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.delete<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/attributes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * deleteProductOptions
     * 
     * @param cartId cartId
     * @param itemId itemId
     * @param customerId 
     * @param requestParams requestParams
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProductOptionsUsingDELETE3(cartId: number, itemId: number, customerId: number, requestParams?: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public deleteProductOptionsUsingDELETE3(cartId: number, itemId: number, customerId: number, requestParams?: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public deleteProductOptionsUsingDELETE3(cartId: number, itemId: number, customerId: number, requestParams?: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public deleteProductOptionsUsingDELETE3(cartId: number, itemId: number, customerId: number, requestParams?: Array<OrderItemAttributeWrapper>, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling deleteProductOptionsUsingDELETE3.');
        }
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling deleteProductOptionsUsingDELETE3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling deleteProductOptionsUsingDELETE3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.delete<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/item/${encodeURIComponent(String(itemId))}/attributes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findCartById
     * 
     * @param cartId cartId
     * @param customerId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCartByIdUsingGET3(cartId: number, customerId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public findCartByIdUsingGET3(cartId: number, customerId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public findCartByIdUsingGET3(cartId: number, customerId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public findCartByIdUsingGET3(cartId: number, customerId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling findCartByIdUsingGET3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling findCartByIdUsingGET3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findCartForCustomer
     * 
     * @param onlyIfExists onlyIfExists
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findCartForCustomerUsingGET3(onlyIfExists?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public findCartForCustomerUsingGET3(onlyIfExists?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public findCartForCustomerUsingGET3(onlyIfExists?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public findCartForCustomerUsingGET3(onlyIfExists?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (onlyIfExists !== undefined) {
            queryParameters = queryParameters.set('onlyIfExists', <any>onlyIfExists);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<OrderWrapper>(`${this.basePath}/cart`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * reconfigureItemFromOrder
     * 
     * @param orderItemId orderItemId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reconfigureItemFromOrderUsingGET1(orderItemId: number, observe?: 'body', reportProgress?: boolean): Observable<ConfigurableOrderItemWrapper>;
    public reconfigureItemFromOrderUsingGET1(orderItemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConfigurableOrderItemWrapper>>;
    public reconfigureItemFromOrderUsingGET1(orderItemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConfigurableOrderItemWrapper>>;
    public reconfigureItemFromOrderUsingGET1(orderItemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (orderItemId === null || orderItemId === undefined) {
            throw new Error('Required parameter orderItemId was null or undefined when calling reconfigureItemFromOrderUsingGET1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<ConfigurableOrderItemWrapper>(`${this.basePath}/cart/reconfigure/${encodeURIComponent(String(orderItemId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeAllOfferCodes
     * 
     * @param cartId cartId
     * @param customerId 
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeAllOfferCodesUsingDELETE3(cartId: number, customerId: number, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public removeAllOfferCodesUsingDELETE3(cartId: number, customerId: number, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public removeAllOfferCodesUsingDELETE3(cartId: number, customerId: number, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public removeAllOfferCodesUsingDELETE3(cartId: number, customerId: number, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling removeAllOfferCodesUsingDELETE3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling removeAllOfferCodesUsingDELETE3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/offers`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeItemFromOrder
     * 
     * @param itemId itemId
     * @param cartId cartId
     * @param customerId 
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeItemFromOrderUsingDELETE3(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public removeItemFromOrderUsingDELETE3(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public removeItemFromOrderUsingDELETE3(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public removeItemFromOrderUsingDELETE3(itemId: number, cartId: number, customerId: number, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling removeItemFromOrderUsingDELETE3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling removeItemFromOrderUsingDELETE3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling removeItemFromOrderUsingDELETE3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/items/${encodeURIComponent(String(itemId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removeOfferCode
     * 
     * @param promoCode promoCode
     * @param cartId cartId
     * @param customerId 
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeOfferCodeUsingDELETE3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public removeOfferCodeUsingDELETE3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public removeOfferCodeUsingDELETE3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public removeOfferCodeUsingDELETE3(promoCode: string, cartId: number, customerId: number, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (promoCode === null || promoCode === undefined) {
            throw new Error('Required parameter promoCode was null or undefined when calling removeOfferCodeUsingDELETE3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling removeOfferCodeUsingDELETE3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling removeOfferCodeUsingDELETE3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/offer/${encodeURIComponent(String(promoCode))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveEmailForCart
     * 
     * @param cartId cartId
     * @param emailAddress emailAddress
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveEmailForCartUsingPOST1(cartId: number, emailAddress: string, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public saveEmailForCartUsingPOST1(cartId: number, emailAddress: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public saveEmailForCartUsingPOST1(cartId: number, emailAddress: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public saveEmailForCartUsingPOST1(cartId: number, emailAddress: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling saveEmailForCartUsingPOST1.');
        }
        if (emailAddress === null || emailAddress === undefined) {
            throw new Error('Required parameter emailAddress was null or undefined when calling saveEmailForCartUsingPOST1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (emailAddress !== undefined) {
            queryParameters = queryParameters.set('emailAddress', <any>emailAddress);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/email`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateItemQuantity
     * 
     * @param itemId itemId
     * @param cartId cartId
     * @param quantity quantity
     * @param customerId 
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateItemQuantityUsingPUT3(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public updateItemQuantityUsingPUT3(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public updateItemQuantityUsingPUT3(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public updateItemQuantityUsingPUT3(itemId: number, cartId: number, quantity: number, customerId: number, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling updateItemQuantityUsingPUT3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling updateItemQuantityUsingPUT3.');
        }
        if (quantity === null || quantity === undefined) {
            throw new Error('Required parameter quantity was null or undefined when calling updateItemQuantityUsingPUT3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling updateItemQuantityUsingPUT3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (quantity !== undefined) {
            queryParameters = queryParameters.set('quantity', <any>quantity);
        }
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/items/${encodeURIComponent(String(itemId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateOrderAttributes
     * 
     * @param attributes attributes
     * @param cartId cartId
     * @param customerId 
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateOrderAttributesUsingPUT3(attributes: Array<OrderAttributeWrapper>, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public updateOrderAttributesUsingPUT3(attributes: Array<OrderAttributeWrapper>, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public updateOrderAttributesUsingPUT3(attributes: Array<OrderAttributeWrapper>, cartId: number, customerId: number, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public updateOrderAttributesUsingPUT3(attributes: Array<OrderAttributeWrapper>, cartId: number, customerId: number, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (attributes === null || attributes === undefined) {
            throw new Error('Required parameter attributes was null or undefined when calling updateOrderAttributesUsingPUT3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling updateOrderAttributesUsingPUT3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling updateOrderAttributesUsingPUT3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/attributes`,
            attributes,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * updateProductOptions
     * 
     * @param requestParams requestParams
     * @param cartId cartId
     * @param itemId itemId
     * @param customerId 
     * @param priceOrder priceOrder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateProductOptionsUsingPUT3(requestParams: Array<OrderItemAttributeWrapper>, cartId: number, itemId: number, customerId: number, priceOrder?: boolean, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public updateProductOptionsUsingPUT3(requestParams: Array<OrderItemAttributeWrapper>, cartId: number, itemId: number, customerId: number, priceOrder?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public updateProductOptionsUsingPUT3(requestParams: Array<OrderItemAttributeWrapper>, cartId: number, itemId: number, customerId: number, priceOrder?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public updateProductOptionsUsingPUT3(requestParams: Array<OrderItemAttributeWrapper>, cartId: number, itemId: number, customerId: number, priceOrder?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (requestParams === null || requestParams === undefined) {
            throw new Error('Required parameter requestParams was null or undefined when calling updateProductOptionsUsingPUT3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling updateProductOptionsUsingPUT3.');
        }
        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling updateProductOptionsUsingPUT3.');
        }
        if (customerId === null || customerId === undefined) {
            throw new Error('Required parameter customerId was null or undefined when calling updateProductOptionsUsingPUT3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (priceOrder !== undefined) {
            queryParameters = queryParameters.set('priceOrder', <any>priceOrder);
        }
        if (customerId !== undefined) {
            queryParameters = queryParameters.set('customerId', <any>customerId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<OrderWrapper>(`${this.basePath}/cart/${encodeURIComponent(String(cartId))}/item/${encodeURIComponent(String(itemId))}/attributes`,
            requestParams,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
