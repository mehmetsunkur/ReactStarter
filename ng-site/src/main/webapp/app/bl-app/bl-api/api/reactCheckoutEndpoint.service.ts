/**
 * Broadleaf Commerce API
 * The default Broadleaf Commerce APIs
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { AddressWrapper } from '../model/addressWrapper';
import { OrderPaymentWrapper } from '../model/orderPaymentWrapper';
import { OrderWrapper } from '../model/orderWrapper';
import { PaymentTransactionWrapper } from '../model/paymentTransactionWrapper';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReactCheckoutEndpointService {

    protected basePath = 'https://localhost:3000/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * addOrderPaymentTransaction
     * 
     * @param paymentId paymentId
     * @param wrapper wrapper
     * @param cartId cartId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addOrderPaymentTransactionUsingPUT3(paymentId: number, wrapper: PaymentTransactionWrapper, cartId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderPaymentWrapper>;
    public addOrderPaymentTransactionUsingPUT3(paymentId: number, wrapper: PaymentTransactionWrapper, cartId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderPaymentWrapper>>;
    public addOrderPaymentTransactionUsingPUT3(paymentId: number, wrapper: PaymentTransactionWrapper, cartId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderPaymentWrapper>>;
    public addOrderPaymentTransactionUsingPUT3(paymentId: number, wrapper: PaymentTransactionWrapper, cartId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (paymentId === null || paymentId === undefined) {
            throw new Error('Required parameter paymentId was null or undefined when calling addOrderPaymentTransactionUsingPUT3.');
        }
        if (wrapper === null || wrapper === undefined) {
            throw new Error('Required parameter wrapper was null or undefined when calling addOrderPaymentTransactionUsingPUT3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling addOrderPaymentTransactionUsingPUT3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cartId !== undefined) {
            queryParameters = queryParameters.set('cartId', <any>cartId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.put<OrderPaymentWrapper>(`${this.basePath}/cart/checkout/payment/${encodeURIComponent(String(paymentId))}/transaction`,
            wrapper,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * addPaymentToOrderById
     * 
     * @param amount amount
     * @param currency currency
     * @param customerPaymentId customerPaymentId
     * @param cartId cartId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addPaymentToOrderByIdUsingPOST3(amount: number, currency: string, customerPaymentId: number, cartId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderPaymentWrapper>;
    public addPaymentToOrderByIdUsingPOST3(amount: number, currency: string, customerPaymentId: number, cartId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderPaymentWrapper>>;
    public addPaymentToOrderByIdUsingPOST3(amount: number, currency: string, customerPaymentId: number, cartId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderPaymentWrapper>>;
    public addPaymentToOrderByIdUsingPOST3(amount: number, currency: string, customerPaymentId: number, cartId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (amount === null || amount === undefined) {
            throw new Error('Required parameter amount was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
        }
        if (currency === null || currency === undefined) {
            throw new Error('Required parameter currency was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
        }
        if (customerPaymentId === null || customerPaymentId === undefined) {
            throw new Error('Required parameter customerPaymentId was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling addPaymentToOrderByIdUsingPOST3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (amount !== undefined) {
            queryParameters = queryParameters.set('amount', <any>amount);
        }
        if (currency !== undefined) {
            queryParameters = queryParameters.set('currency', <any>currency);
        }
        if (cartId !== undefined) {
            queryParameters = queryParameters.set('cartId', <any>cartId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<OrderPaymentWrapper>(`${this.basePath}/cart/checkout/payment/${encodeURIComponent(String(customerPaymentId))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * addPaymentToOrder
     * 
     * @param wrapper wrapper
     * @param cartId cartId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addPaymentToOrderUsingPOST3(wrapper: OrderPaymentWrapper, cartId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderPaymentWrapper>;
    public addPaymentToOrderUsingPOST3(wrapper: OrderPaymentWrapper, cartId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderPaymentWrapper>>;
    public addPaymentToOrderUsingPOST3(wrapper: OrderPaymentWrapper, cartId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderPaymentWrapper>>;
    public addPaymentToOrderUsingPOST3(wrapper: OrderPaymentWrapper, cartId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wrapper === null || wrapper === undefined) {
            throw new Error('Required parameter wrapper was null or undefined when calling addPaymentToOrderUsingPOST3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling addPaymentToOrderUsingPOST3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cartId !== undefined) {
            queryParameters = queryParameters.set('cartId', <any>cartId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<OrderPaymentWrapper>(`${this.basePath}/cart/checkout/payment`,
            wrapper,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findPaymentsForOrder
     * 
     * @param cartId cartId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findPaymentsForOrderUsingGET3(cartId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<OrderPaymentWrapper>>;
    public findPaymentsForOrderUsingGET3(cartId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OrderPaymentWrapper>>>;
    public findPaymentsForOrderUsingGET3(cartId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OrderPaymentWrapper>>>;
    public findPaymentsForOrderUsingGET3(cartId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling findPaymentsForOrderUsingGET3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cartId !== undefined) {
            queryParameters = queryParameters.set('cartId', <any>cartId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<OrderPaymentWrapper>>(`${this.basePath}/cart/checkout/payments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * performCheckout
     * 
     * @param paymentMethodNonce payment_method_nonce
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public performCheckoutUsingPOST3(paymentMethodNonce?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public performCheckoutUsingPOST3(paymentMethodNonce?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public performCheckoutUsingPOST3(paymentMethodNonce?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public performCheckoutUsingPOST3(paymentMethodNonce?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (paymentMethodNonce !== undefined) {
            queryParameters = queryParameters.set('payment_method_nonce', <any>paymentMethodNonce);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<string>(`${this.basePath}/cart/checkout/complete`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * performCodCheckout
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public performCodCheckoutUsingPOST1(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public performCodCheckoutUsingPOST1(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public performCodCheckoutUsingPOST1(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public performCodCheckoutUsingPOST1(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.post<string>(`${this.basePath}/cart/checkout/cod/complete`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * removePaymentFromOrderById
     * 
     * @param paymentId paymentId
     * @param cartId cartId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removePaymentFromOrderByIdUsingDELETE3(paymentId: number, cartId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public removePaymentFromOrderByIdUsingDELETE3(paymentId: number, cartId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public removePaymentFromOrderByIdUsingDELETE3(paymentId: number, cartId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public removePaymentFromOrderByIdUsingDELETE3(paymentId: number, cartId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (paymentId === null || paymentId === undefined) {
            throw new Error('Required parameter paymentId was null or undefined when calling removePaymentFromOrderByIdUsingDELETE3.');
        }
        if (cartId === null || cartId === undefined) {
            throw new Error('Required parameter cartId was null or undefined when calling removePaymentFromOrderByIdUsingDELETE3.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (cartId !== undefined) {
            queryParameters = queryParameters.set('cartId', <any>cartId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.delete<OrderWrapper>(`${this.basePath}/cart/checkout/payment/${encodeURIComponent(String(paymentId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveBillingAddressForNewPayment
     * 
     * @param wrapper wrapper
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveBillingAddressForNewPaymentUsingPOST1(wrapper: AddressWrapper, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public saveBillingAddressForNewPaymentUsingPOST1(wrapper: AddressWrapper, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public saveBillingAddressForNewPaymentUsingPOST1(wrapper: AddressWrapper, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public saveBillingAddressForNewPaymentUsingPOST1(wrapper: AddressWrapper, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wrapper === null || wrapper === undefined) {
            throw new Error('Required parameter wrapper was null or undefined when calling saveBillingAddressForNewPaymentUsingPOST1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/cart/checkout/billing-address`,
            wrapper,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * saveNewCustomerPayment
     * 
     * @param wrapper wrapper
     * @param paymentMethodNonce payment_method_nonce
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public saveNewCustomerPaymentUsingPOST1(wrapper: AddressWrapper, paymentMethodNonce: string, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public saveNewCustomerPaymentUsingPOST1(wrapper: AddressWrapper, paymentMethodNonce: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public saveNewCustomerPaymentUsingPOST1(wrapper: AddressWrapper, paymentMethodNonce: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public saveNewCustomerPaymentUsingPOST1(wrapper: AddressWrapper, paymentMethodNonce: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (wrapper === null || wrapper === undefined) {
            throw new Error('Required parameter wrapper was null or undefined when calling saveNewCustomerPaymentUsingPOST1.');
        }
        if (paymentMethodNonce === null || paymentMethodNonce === undefined) {
            throw new Error('Required parameter paymentMethodNonce was null or undefined when calling saveNewCustomerPaymentUsingPOST1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (paymentMethodNonce !== undefined) {
            queryParameters = queryParameters.set('payment_method_nonce', <any>paymentMethodNonce);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<OrderWrapper>(`${this.basePath}/cart/checkout/customer-payment`,
            wrapper,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * selectExistingCustomerPayment
     * 
     * @param customerPaymentId customerPaymentId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public selectExistingCustomerPaymentUsingPUT1(customerPaymentId: number, observe?: 'body', reportProgress?: boolean): Observable<OrderWrapper>;
    public selectExistingCustomerPaymentUsingPUT1(customerPaymentId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OrderWrapper>>;
    public selectExistingCustomerPaymentUsingPUT1(customerPaymentId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OrderWrapper>>;
    public selectExistingCustomerPaymentUsingPUT1(customerPaymentId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (customerPaymentId === null || customerPaymentId === undefined) {
            throw new Error('Required parameter customerPaymentId was null or undefined when calling selectExistingCustomerPaymentUsingPUT1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.put<OrderWrapper>(`${this.basePath}/cart/checkout/customer-payment/${encodeURIComponent(String(customerPaymentId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
