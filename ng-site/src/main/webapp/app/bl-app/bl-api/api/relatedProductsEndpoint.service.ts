/**
 * Broadleaf Commerce API
 * The default Broadleaf Commerce APIs
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ProductWrapper } from '../model/productWrapper';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RelatedProductsEndpointService {

    protected basePath = 'https://localhost:3000/api/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * getRelatedProducts
     * 
     * @param productId productId
     * @param productKey productKey
     * @param categoryId categoryId
     * @param categoryKey categoryKey
     * @param quantity quantity
     * @param type type
     * @param includePromotionMessages includePromotionMessages
     * @param includePriceData includePriceData
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRelatedProductsUsingGET1(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<ProductWrapper>>;
    public getRelatedProductsUsingGET1(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ProductWrapper>>>;
    public getRelatedProductsUsingGET1(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ProductWrapper>>>;
    public getRelatedProductsUsingGET1(productId?: number, productKey?: string, categoryId?: number, categoryKey?: string, quantity?: number, type?: string, includePromotionMessages?: boolean, includePriceData?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (productId !== undefined) {
            queryParameters = queryParameters.set('productId', <any>productId);
        }
        if (productKey !== undefined) {
            queryParameters = queryParameters.set('productKey', <any>productKey);
        }
        if (categoryId !== undefined) {
            queryParameters = queryParameters.set('categoryId', <any>categoryId);
        }
        if (categoryKey !== undefined) {
            queryParameters = queryParameters.set('categoryKey', <any>categoryKey);
        }
        if (quantity !== undefined) {
            queryParameters = queryParameters.set('quantity', <any>quantity);
        }
        if (type !== undefined) {
            queryParameters = queryParameters.set('type', <any>type);
        }
        if (includePromotionMessages !== undefined) {
            queryParameters = queryParameters.set('includePromotionMessages', <any>includePromotionMessages);
        }
        if (includePriceData !== undefined) {
            queryParameters = queryParameters.set('includePriceData', <any>includePriceData);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<Array<ProductWrapper>>(`${this.basePath}/related-products`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
